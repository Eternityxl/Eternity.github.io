<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python中如何自动导入缺失的库</title>
    <url>/2020/10/14/python%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%BA%93/</url>
    <content><![CDATA[<p><strong>python中如何自动导入缺失的库</strong></p>
<p>在我这个菜鸟写python的过程中，经常碰到python库导入失败的问题，比如：ImportError: No module named ‘xxx’或者ModuleNotFoundError: No module named ‘xxx’。我就气的不行。</p>
<p>据我个人了解，导入失败一般有两种问题：一种是导入自己写的模块（就是自己写的.py文件，感觉凭自己的水平，不可能是第一种），另一种是导入三方库，所以，这篇博客主要讨论第二种。</p>
<p>解决这个问题很简单，缺什么库，导什么库就好了，或者使用恰当的替代方案。但是这个问题又分为三种情况：</p>
<p><strong>一、单个模块中缺失的库</strong></p>
<p>在写代码的时候，如果我们需要使用某个三方库（如 requests），但不确定实际运行的环境是否装了它，那么可以这样：</p>
<p>try:</p>
<p>  import requests</p>
<p>except ImportError:</p>
<p>  import os</p>
<p>  os.system(‘pip install requests’)</p>
<p>  import requests</p>
<p>这样写的效果是，如果找不到 requests 库，就先安装，再导入。</p>
<p>在某些开源项目中，我们可能还会看到如下的写法（以 json 为例）：</p>
<p>try:</p>
<p>  import simplejson as json</p>
<p>except ImportError:</p>
<p>  import json</p>
<p>这样写的效果是，优先导入三方库 simplejson，如果找不到，那就使用内置的标准库 json。</p>
<p>这种写法的好处是不需要导入额外的库，但它有个缺点，即需要保证那两个库在使用上是兼容的，如果在标准库中找不到替代的库，那就不可行了。</p>
<p>如果真找不到兼容的标准库，也可以自己写一个模块（如 my_json.py），实现想要的东西，然后在 except 语句中导入它（凭我目前的水平，自己实现想要的东西，呵呵，痴人说梦）。</p>
<p>try:</p>
<p>  import simplejson as json</p>
<p>except ImportError:</p>
<p>  import my_json as json</p>
<p><strong>二、整个项目中缺失的库</strong></p>
<p>以上的思路是针对开发中的项目，但是它有几个不足：</p>
<p>1、在代码中对每个可能缺失的三方库都 pip install，实在是太烦了，一点都不简洁；</p>
<p>2、某个三方库无法被标准库或自己手写的库替代，该怎么办？（不存在的，我手写不出来）</p>
<p>3、已成型的项目，不允许做这些修改怎么办？</p>
<p>所以这里的主要问题是：<strong>有一个项目，想要部署到新的机器上，它涉及很多三方库，但是机器上都没有预装，该怎么办？</strong></p>
<p>对于一个合规的项目，按照约定，通常它会包含一个“<strong>requirements.txt</strong> ”文件，记录了该项目的所有依赖库及其所需的版本号。这是在项目发布前，使用命令pip freeze &gt; requirements.txt 生成的。</p>
<p>使用命令pip install -r requirements.txt （在该文件所在目录执行，或在命令中写全文件的路径），就能自动把所有的依赖库给装上。</p>
<p>但是，如果项目不合规，或者由于其它倒霉的原因，我们没有这样的文件，又该如何是好？</p>
<p>一个笨方法就是，把项目跑起来，等它出错，遇到一个导库失败，就手动装一个，然后再跑一遍项目，遇到导库失败就装一下，如此循环……（此处省略 1 万句脏话）……</p>
<p><img src="D:/Summary/2019/0722/weixinobU7Vju1XqMa66fQQaTbRY4zBH20/5b7035f43d474d0daec29371bd3ebb13/640.webp?lastModify=1602670122"></p>
<p><strong>三、自动导入任意缺失的库</strong></p>
<p><strong>有没有一种更好的可以自动导入缺失的库的方法呢？答案肯定是有的，如果没有，那我写这篇博客干什么，闲的吗，电费不要钱啊，流量不要钱啊！</strong></p>
<p>来！先看看效果：</p>
<p><img src="D:/Summary/2019/0722/weixinobU7Vju1XqMa66fQQaTbRY4zBH20/97f212d52a1c400fbb36437c15b2a4c5/640.webp?lastModify=1602670122" alt="img"></p>
<p>怎么样，是不是perfect！</p>
<p>我们以 tornado 为例，第一步操作可看出，我们没有装过 tornado，所以导入失败了，经过第二步操作后，再次导入 tornado 时，程序会帮我们自动下载并安装好 tornado，所以不再报错。</p>
<p>第二步导入的autoinstall 是我们手写的模块，代码如下：</p>
<p>import sys</p>
<p>import os</p>
<p>from importlib import import_module</p>
<p>class AutoInstall():</p>
<p>  _loaded = set()</p>
<p>  @classmethod</p>
<p>  def find_spec(cls, name, path, target=None):</p>
<p>​      if path is None and name not in cls._loaded:</p>
<p>​        cls._loaded.add(name)</p>
<p>​        print(“Installing”, name)</p>
<p>​        try:</p>
<p>​          result = os.system(‘pip install {}’.format(name))</p>
<p>​          if result == 0:</p>
<p>​            return import_module(name)</p>
<p>​        except Exception as e:</p>
<p>​          print(“Failed”, e)</p>
<p>​      return None</p>
<p>sys.meta_path.append(AutoInstall)</p>
<p>这段代码中使用了sys.meta_path ，我们先打印一下，看看它是个什么东西？</p>
<p><img src="file://D:/Summary/2019/0722/weixinobU7Vju1XqMa66fQQaTbRY4zBH20/e890d8337bce4b34b5d3aee3221ed031/640.webp?lastModify=1602670122" alt="img"></p>
<p>Python 3 的 import 机制在查找过程中，大致顺序如下：</p>
<ul>
<li>在 sys.modules 中查找，它缓存了所有已导入的模块</li>
<li>在 sys.meta_path 中查找，它支持自定义的加载器</li>
<li>在 sys.path 中查找，它记录了一些库所在的目录名</li>
<li>若未找到，抛出ImportError异常</li>
</ul>
<p>其中要注意，sys.meta_path 在不同的 Python 版本中有所差异，比如它在 Python 2 与 Python 3 中差异很大；在较新的 Python 3 版本（3.4+）中，自定义的加载器需要实现find_spec方法，而早期的版本用的则是find_module。</p>
<p><img src="file://D:/Summary/2019/0722/weixinobU7Vju1XqMa66fQQaTbRY4zBH20/97d4807813b14e0aa28acc5f3c9a329d/clipboard.png?lastModify=1602670122" alt="img"></p>
<p>以上代码是一个自定义的类库加载器 AutoInstall，可以实现自动导入三方库的目的。需要说明一下，这种方法会“劫持”所有新导入的库，破坏原有的导入方式，因此也可能出现一些奇奇怪怪的问题，所以要当心。</p>
<p>sys.meta_path 属于 Python 探针的一种运用。探针，即import hook，是 Python 几乎不受人关注的机制，但它可以做很多事，例如加载网络上的库、在导入模块时对模块进行修改、自动安装缺失库、上传审计信息、延迟加载等等。</p>
<p>算了，不说了。来个解决方案的总结：</p>
<ul>
<li>可以用 try…except 方式，实现简单的三方库导入或者替换</li>
<li>已知全部缺失的依赖库时（如 requirements.txt），可以手动安装</li>
<li>利用 sys.meta_path，可以自动导入任意的缺失库</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web测试与app测试的区别</title>
    <url>/2020/10/14/web%E6%B5%8B%E8%AF%95%E4%B8%8Eapp%E6%B5%8B%E8%AF%95%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><strong>web测试与app测试区别</strong></p>
<ul>
<li><p><strong>系统结构方面</strong></p>
</li>
<li><ul>
<li>Web 项目，b/s架构，基于浏览器的；Web 测试只要更新了服务器端，客户端就会同步会更新；</li>
<li>App 项目，c/s结构的，必须要有客户端；App 修改了服务端，则客户端用户所有核心版本都需要进行回归测试一遍；</li>
</ul>
</li>
<li><p><strong>兼容方面</strong></p>
</li>
<li><ul>
<li>Web项目：a. 浏览器（火狐、谷歌、IE等）b. 操作系统（Windows7、Windows10、Linux等）</li>
<li>App项目：a. 设备系统: iOS（ipad、iphone）、Android（三星、华为、联想等） 、Windows（Win7、Win8）、OSX（Mac）b. 手机设备可根据 手机型号、分辨率不同</li>
</ul>
</li>
<li><p><strong>性能方面</strong></p>
</li>
<li><ul>
<li>web项目 需监测 响应时间、CPU、Memory</li>
<li>app项目 除了监测 响应时间、CPU、Memory外，还需监测流量、电量等</li>
</ul>
</li>
<li><p><strong>相对于 Wed 项目，APP有专项测试</strong></p>
</li>
<li><ul>
<li>干扰测试：中断，来电，短信，关机，重启等</li>
<li>弱网络测试（模拟2g、3g、4g，wifi网络状态以及丢包情况）；网络切换测试（网络断开后重连、3g切换到4g/wifi 等）</li>
<li>安装、更新、卸载</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>安装：需考虑安装时的中断、弱网、安装后删除安装文件等情况</li>
<li>卸载：需考虑 卸载后是否删除 App 相关的文件</li>
<li>更新：分强制更新、非强制更新、增量包更新、断点续传、弱网状态下更新</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>界面操作</strong>：关于手机端测试，需注意手势，横竖屏切换，多点触控，前后台切换</p>
</li>
<li><p><strong>安全测试</strong>：安装包是否可反编译代码、安装包是否签名、权限设置，例如访问通讯录等</p>
</li>
<li><p><strong>边界测试</strong>：可用存储空间少、没有SD卡/双SD卡、飞行模式、系统时间有误、第三方依赖（QQ、微信登录）等</p>
</li>
<li><p><strong>权限测试</strong>：设置某个 App 是否可以获取该权限，例如是否可访问通讯录、相册、照相机等</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>“使用hexo搭建个人博客过程中踩过的坑”</title>
    <url>/2020/10/14/%E2%80%9C%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91%E2%80%9D/</url>
    <content><![CDATA[<p>​    在使用hexo搭建个人博客的过程中，遇到了很多的坑，今于是在此记录一下。</p>
<h4 id="1、node-js对windows系统的兼容问题"><a href="#1、node-js对windows系统的兼容问题" class="headerlink" title="1、node.js对windows系统的兼容问题"></a>1、node.js对windows系统的兼容问题</h4><p>&emsp;&emsp;因为本人是win7的死忠党，所以在安装node.Js的过程中没有考虑到版本兼容问题，第一次安装node.js失败，百度了一下，node.js最新版本对于系统的最低要求是win8.1，于是乎，失败。继续百度ng。。。</p>
<p>&emsp;&emsp;1个小时后，无意中翻到一位大佬的博客说，win7支持12.16.0以下的node.js，立即安排上！果不其然，成功了。</p>
<h4 id="2、hexo-deployer-git插件问题"><a href="#2、hexo-deployer-git插件问题" class="headerlink" title="2、hexo-deployer-git插件问题"></a>2、hexo-deployer-git插件问题</h4><p>&emsp;&emsp;在本地成功部署github+hexo环境并成功预览后，尝试同步至git仓库，在hexo d的时候报错了，提示我缺少git，这个坑简单，一条命令解决npm install –save hexo-deployer-git。</p>
<h4 id="3、hexo主题选择问题"><a href="#3、hexo主题选择问题" class="headerlink" title="3、hexo主题选择问题"></a>3、hexo主题选择问题</h4><p>&emsp;&emsp;说实话，hexo的默认主题是真的丑，奈何自己的开发时间有限，只能找度娘要，尝试了很多花里胡哨的主题，总是更换失败，一直以为是自己的问题，看了下报错日志才发现，是主题的问题，好几年没有更新了，在此吐槽一下，不能用不要放到官网啊，缺少各种包和组件，我安装不累的嘛！在尝试了很多主题后，选择了大众推荐度最高的next主题，真香。</p>
<h4 id="4、域名解析"><a href="#4、域名解析" class="headerlink" title="4、域名解析"></a>4、域名解析</h4><p>&emsp;&emsp;买域名的时候，xx云套餐里送了域名解析服务，解析完成后，，输入自己的域名，还是不能成功跳转，于是乎百度了一下，原来，域名解析之后还要在github配置github pages的Custom domain，保存自己的域名才能生效，soga！</p>
<p>&emsp;&emsp;一顿操作，搞定！打开skyless.top，还是不能跳转，心态雪崩。</p>
<p>&emsp;&emsp;又是一般百度，不得不说，就没有度娘不知道的事，度娘牛逼，原来域名解析后，十分钟后才会生效，坐等…</p>
<p>&emsp;&emsp;十分钟后，光速打开自己的博客，成功跳转，nice！</p>
<h4 id="5、skyless-top域名由来"><a href="#5、skyless-top域名由来" class="headerlink" title="5、skyless.top域名由来"></a>5、skyless.top域名由来</h4><p>&emsp;&emsp;github pages用的也很香，但是xxx.github.io这个域名，一点都不个性好吗，像我们这种有格调的人，域名也必须有格调，不然哪来的动力呢！打开阿里云，输入心仪的.com域名，50多w，emmm，xxx.github.io这个域名也不错的哇，.com也就一般般，没错，就是这样。</p>
<p>&emsp;&emsp;内心斗争了一上午，不要误会，我不是在纠结买不买，我是在纠结，哪里才能找到性价比又高，又有逼格的域名呢，于是抬头看天，sky，less，有了，skyless.top，我的第一个个人域名就这么随意且草率的诞生了。</p>
]]></content>
  </entry>
</search>
